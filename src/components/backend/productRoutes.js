import express from "express";
import { initializeApp, cert, getApps } from "firebase-admin/app";
import { getFirestore } from "firebase-admin/firestore";
import serviceAccount from "./serviceAccountKey.json" assert { type: "json" };

const router = express.Router();

// üîπ Kh·ªüi t·∫°o Firebase Admin ch·ªâ 1 l·∫ßn
if (!getApps().length) {
  initializeApp({
    credential: cert(serviceAccount),
  });
}

const db = getFirestore();
const productsRef = db.collection("products");
const categoryRef = db.collection("category");

// =================== PRODUCTS API ===================

// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
router.get("/", async (req, res) => {
  try {
    const snap = await productsRef.get();
    const products = snap.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    res.status(200).json(products);
  } catch (err) {
    res.status(500).json({
      message: "L·ªói khi l·∫•y s·∫£n ph·∫©m",
      error: err.message,
    });
  }
});

// L·∫•y s·∫£n ph·∫©m theo ID
router.get("/:id", async (req, res) => {
  try {
    const docSnap = await productsRef.doc(req.params.id).get();
    if (!docSnap.exists)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    res.status(200).json({ id: docSnap.id, ...docSnap.data() });
  } catch (err) {
    res.status(500).json({
      message: "L·ªói khi l·∫•y s·∫£n ph·∫©m",
      error: err.message,
    });
  }
});

// T·∫°o s·∫£n ph·∫©m
router.post("/", async (req, res) => {
  try {
    const newDoc = await productsRef.add(req.body);
    res.status(201).json({ id: newDoc.id, ...req.body });
  } catch (err) {
    res.status(500).json({
      message: "L·ªói khi t·∫°o s·∫£n ph·∫©m",
      error: err.message,
    });
  }
});

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m
router.put("/:id", async (req, res) => {
  try {
    await productsRef.doc(req.params.id).update(req.body);
    res.status(200).json({ message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({
      message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m",
      error: err.message,
    });
  }
});

// X√≥a s·∫£n ph·∫©m
router.delete("/:id", async (req, res) => {
  try {
    await productsRef.doc(req.params.id).delete();
    res.status(200).json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({
      message: "L·ªói khi x√≥a s·∫£n ph·∫©m",
      error: err.message,
    });
  }
});

export default router;
